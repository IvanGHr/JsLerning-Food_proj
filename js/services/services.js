//Создаем функцию, работы с сервером и async указывает что в функции будет асинхронный код, и там где мы ставим await - это показывает выполнение какого действия мы должны дождатся перед выполнением следующего (async await работают вместе)
const postData = async (url, data) => {//кол бек функция , которая отправляет(ссылку, и объект с которым будет работать)
    const res = await fetch(url, {//создается переменная в которую помещается обработчик событий fetch(принимает ссылку, и объект в котором указываются параметры что делать с этой ссылкой)
        method: 'POST',//параметр который указывает что мы делаем (отправляем, получаем...) данные с сервера
        headers: { //параметр который указывает с каким форматом данных мы будем работать 
            'Content-type': 'application/json'//в данном случае json файлы
        },
        body: data //параметр указывающий что мы делаем с файлами которые получили или отправили
    });

    return await res.json();//а здесь мы возвращаем промис объект в формате json 
};

async function getResource(url) {//кол бек функция , которая получает(ссылку)
    let res = await fetch(url);

    if (!res.ok) {//Если с запросом что то не так ! - оператор не, .ok свйоство , которое проверяет fetch() и убеждается что все в порядке
        throw new Error(`Could not fetch ${url}, status: ${res.status}`)//throw - выкинуть , ошибку ( с текстом)
    }

    return await res.json();//а здесь мы возвращаем промис который будет превращать все полученные данные в js файл
}

export {postData};
export {getResource};